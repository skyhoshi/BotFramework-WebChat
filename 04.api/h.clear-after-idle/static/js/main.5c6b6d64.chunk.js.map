{"version":3,"sources":["Countdown.js","utils/useInterval.js","App.js","utils/useTimeoutAt.js","serviceWorker.js","index.js"],"names":["Countdown","fn","intervalMS","ms","to","useState","setForceRefresh","timeRemaining","Math","max","Date","now","perInterval","useCallback","min","useEffect","interval","setInterval","clearInterval","className","classNames","floor","slice","fetchToken","a","fetch","method","res","json","token","App","at","resetAt","setResetAt","session","setSession","initConversation","key","directLine","createDirectLine","store","createStore","next","action","type","timer","setTimeout","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6iBAYe,SAASA,EAAT,GAA4B,ICVPC,EAAIC,EDMpBC,EAIgBC,EAAM,EAANA,GAAM,EACZC,mBAAS,IAA5BC,EAD+B,oBAGlCC,EAAgBC,KAAKC,IAAI,EAAGL,EAAKM,KAAKC,OACtCC,EAAcC,uBAAY,kBAAMP,EAAgB,MAAK,CAACA,IAI5D,OClBkCL,EDgBtBW,EChB0BV,EDgBbM,KAAKC,IAAI,EAAGD,KAAKM,IAZnB,IAYyCV,EAAKM,KAAKC,QCf1EI,qBAAU,WACR,GAAKd,GAAqB,IAAfC,GAA0C,kBAAfA,EAAtC,CAIA,IAAMc,EAAWC,YAAYhB,EAAIC,GAEjC,OAAO,kBAAMgB,cAAcF,OAC1B,CAACf,EAAIC,IDUN,yBAAKiB,UAAU,aAAf,kBACkB,IAChB,0BAAMA,UAAWC,IAAW,kBAAmB,CAAE,uBAAwBb,EAAgB,QAf3EJ,EAgBAI,EAfZ,GAAN,OAAUC,KAAKa,MAAMlB,EAAK,KAA1B,aAAqC,IAAOK,KAAKa,MAAMlB,EAAK,KAAQ,IAAKmB,OAAO,O,SEKnEC,I,2EAAf,gCAAAC,EAAA,sEACoBC,MAAM,kEAAmE,CAAEC,OAAQ,SADvG,cACQC,EADR,gBAE0BA,EAAIC,OAF9B,uBAEUC,EAFV,EAEUA,MAFV,kBAISA,GAJT,4C,sBA8CeC,MAvCf,WAAgB,ICnBqB7B,EAAI8B,EDmB1B,EACiB1B,oBAAS,kBAAMK,KAAKC,MAf/B,OAcN,mBACNqB,EADM,KACGC,EADH,OAEiB5B,qBAFjB,mBAEN6B,EAFM,KAEGC,EAFH,KAIPC,EAAmBvB,uBAAY,WACnCsB,GAAW,GAEX,sBAAC,8BAAAX,EAAA,sEACqBD,IADrB,OACOM,EADP,OAEOQ,EAAM3B,KAAKC,MAEjBwB,EAAW,CACTG,WAAYC,2BAAiB,CAAEV,UAC/BQ,MACAG,MAAOC,sBAAY,IAAI,kBAAM,SAAAC,GAAI,OAAI,SAAAC,GAMnC,MALoB,kCAAhBA,EAAOC,MAA4D,6BAAhBD,EAAOC,MAE5DX,EAAWvB,KAAKC,MA/BP,KAkCJ+B,EAAKC,UAbjB,0CAAD,KAiBC,CAACV,EAAYE,IAKhB,OChDmClC,ED6CtBmC,EC7C0BL,ED6CRC,EC5C/BjB,qBAAU,WACR,IAAM8B,EAAQC,WAAW7C,EAAIO,KAAKC,IAAI,EAAGsB,EAAKrB,KAAKC,QAEnD,OAAO,kBAAMoC,aAAaF,MACzB,CAAC5C,EAAI8B,IDyCRhB,oBAAUqB,EAAkB,CAACA,IAG3B,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CAAWf,GAAI4B,MACZE,GACD,kBAAC,IAAD,CAAcf,UAAU,OAAOmB,WAAYJ,EAAQI,WAAYD,IAAKH,EAAQG,IAAKG,MAAON,EAAQM,UE1CpFQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c6b6d64.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\n\nimport './Countdown.css';\nimport useInterval from './utils/useInterval';\n\nconst REFRESH_INTERVAL = 500;\n\nfunction formatTime(ms) {\n  return `${Math.floor(ms / 60000)}:${('0' + (Math.floor(ms / 1000) % 60)).slice(-2)}`;\n}\n\nexport default function Countdown({ to }) {\n  const [, setForceRefresh] = useState({});\n\n  const timeRemaining = Math.max(0, to - Date.now());\n  const perInterval = useCallback(() => setForceRefresh({}), [setForceRefresh]);\n\n  useInterval(perInterval, Math.max(0, Math.min(REFRESH_INTERVAL, to - Date.now())));\n\n  return (\n    <div className=\"countdown\">\n      Time Remaining:{' '}\n      <span className={classNames('countdown__time', { 'countdown__time--red': timeRemaining < 10000 })}>\n        {formatTime(timeRemaining)}\n      </span>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useInterval(fn, intervalMS) {\n  useEffect(() => {\n    if (!fn || intervalMS === 0 || typeof intervalMS !== 'number') {\n      return;\n    }\n\n    const interval = setInterval(fn, intervalMS);\n\n    return () => clearInterval(interval);\n  }, [fn, intervalMS]);\n\n  return false;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport ReactWebChat, { createDirectLine, createStore } from 'botframework-webchat';\n\nimport './App.css';\nimport Countdown from './Countdown';\nimport useTimeoutAt from './utils/useTimeoutAt';\n\nconst IDLE_TIMEOUT = 30000;\n\n// In this demo, we are using Direct Line token from MockBot.\n// Your client code must provide either a secret or a token to talk to your bot.\n// Tokens are more secure. To learn about the differences between secrets and tokens\n// and to understand the risks associated with using secrets, visit\n// https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-authentication?view=azure-bot-service-4.0\nasync function fetchToken() {\n  const res = await fetch('https://webchat-mockbot2.azurewebsites.net/api/token/directline', { method: 'POST' });\n  const { token } = await res.json();\n\n  return token;\n}\n\nfunction App() {\n  const [resetAt, setResetAt] = useState(() => Date.now() + IDLE_TIMEOUT);\n  const [session, setSession] = useState();\n\n  const initConversation = useCallback(() => {\n    setSession(false);\n\n    (async function() {\n      const token = await fetchToken();\n      const key = Date.now();\n\n      setSession({\n        directLine: createDirectLine({ token }),\n        key,\n        store: createStore({}, () => next => action => {\n          if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED' || action.type === 'WEB_CHAT/SUBMIT_SEND_BOX') {\n            // Reset the timer when the connection established, or the user sends an activity\n            setResetAt(Date.now() + IDLE_TIMEOUT);\n          }\n\n          return next(action);\n        })\n      });\n    })();\n  }, [setResetAt, setSession]);\n\n  useTimeoutAt(initConversation, resetAt);\n  useEffect(initConversation, [initConversation]);\n\n  return (\n    <div className=\"App\">\n      <Countdown to={resetAt} />\n      {!!session && (\n        <ReactWebChat className=\"chat\" directLine={session.directLine} key={session.key} store={session.store} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect } from 'react';\n\nexport default function useTimeoutAt(fn, at) {\n  useEffect(() => {\n    const timer = setTimeout(fn, Math.max(0, at - Date.now()));\n\n    return () => clearTimeout(timer);\n  }, [fn, at]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}