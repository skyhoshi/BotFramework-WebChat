{"version":3,"sources":["fetchSpeechServicesCredentials.js","CustomDictationInterims.js","MicrophoneIcon.js","CustomMicrophoneButton.js","LastBotActivity.js","App.js","serviceWorker.js","index.js"],"names":["fetchPromise","connectDictationInterims","Components","Constants","DictateState","DICTATING","STARTING","className","dictateInterims","dictateState","length","map","interim","index","key","size","height","viewBox","width","d","connectMicrophoneButton","click","dictating","disabled","classNames","onClick","MicrophoneIcon","lastFetch","region","a","fetchCredentials","token","now","Date","fetch","method","then","res","json","catch","SpeakActivity","connectToWebChat","activity","activities","slice","reverse","find","role","from","type","Fragment","text","channelData","speak","Composer","App","props","state","directLine","webSpeechPonyfillFactory","createCognitiveServicesSpeechServicesPonyfillFactory","fetchSpeechServicesToken","fetchSpeechServicesRegion","authorizationToken","credentials","this","setState","createDirectLine","CustomMicrophoneButton","CustomDictationInterims","LastBotActivity","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4b9d81e.chunk.js","sourcesContent":["const RENEW_EVERY = 300000;\nlet fetchPromise;\nlet lastFetch = 0;\n\nasync function region() {\n  const { region } = await fetchCredentials();\n\n  return region;\n}\n\nasync function token() {\n  const { token } = await fetchCredentials();\n\n  return token;\n}\n\n// This fetch function will be called every time Web Speech recognizer or synthesizer start\n// You are advised to cache the token to prevent unnecessary network call and delay\nasync function fetchCredentials() {\n  const now = Date.now();\n\n  if (!fetchPromise || now - lastFetch > RENEW_EVERY) {\n    fetchPromise = fetch('https://webchat-mockbot.azurewebsites.net/speechservices/token', { method: 'POST' })\n      .then(res => res.json())\n      .catch(() => {\n        lastFetch = 0;\n      });\n\n    lastFetch = now;\n  }\n\n  return fetchPromise;\n}\n\nexport default fetchCredentials;\nexport { region, token };\n","import React from 'react';\n\nimport { Components, Constants } from 'botframework-webchat';\n\nconst { connectDictationInterims } = Components;\nconst {\n  DictateState: { DICTATING, STARTING }\n} = Constants;\n\nexport default connectDictationInterims()(\n  ({ className, dictateInterims, dictateState }) =>\n    (dictateState === STARTING || dictateState === DICTATING) &&\n    !!dictateInterims.length && (\n      <p className={className}>\n        {dictateInterims.map((interim, index) => (\n          <span key={index}>{interim}&nbsp;</span>\n        ))}\n      </p>\n    )\n);\n","import React from 'react';\n\nexport default ({ className, size = 22 }) => (\n  <svg className={(className || '') + ''} height={size} viewBox=\"0 0 58 58\" width={size}>\n    <path d=\"M 44 28 C 43.448 28 43 28.447 43 29 L 43 35 C 43 42.72 36.72 49 29 49 C 21.28 49 15 42.72 15 35 L 15 29 C 15 28.447 14.552 28 14 28 C 13.448 28 13 28.447 13 29 L 13 35 C 13 43.485 19.644 50.429 28 50.949 L 28 56 L 23 56 C 22.448 56 22 56.447 22 57 C 22 57.553 22.448 58 23 58 L 35 58 C 35.552 58 36 57.553 36 57 C 36 56.447 35.552 56 35 56 L 30 56 L 30 50.949 C 38.356 50.429 45 43.484 45 35 L 45 29 C 45 28.447 44.552 28 44 28 Z\" />\n    <path d=\"M 28.97 44.438 L 28.97 44.438 C 23.773 44.438 19.521 40.033 19.521 34.649 L 19.521 11.156 C 19.521 5.772 23.773 1.368 28.97 1.368 L 28.97 1.368 C 34.166 1.368 38.418 5.772 38.418 11.156 L 38.418 34.649 C 38.418 40.033 34.166 44.438 28.97 44.438 Z\" />\n    <path d=\"M 29 46 C 35.065 46 40 41.065 40 35 L 40 11 C 40 4.935 35.065 0 29 0 C 22.935 0 18 4.935 18 11 L 18 35 C 18 41.065 22.935 46 29 46 Z M 20 11 C 20 6.037 24.038 2 29 2 C 33.962 2 38 6.037 38 11 L 38 35 C 38 39.963 33.962 44 29 44 C 24.038 44 20 39.963 20 35 L 20 11 Z\" />\n  </svg>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Components } from 'botframework-webchat';\n\nimport MicrophoneIcon from './MicrophoneIcon';\n\nconst { connectMicrophoneButton } = Components;\n\nexport default connectMicrophoneButton()(({ className, click, dictating, disabled }) => (\n  <button className={classNames(className, { dictating })} disabled={disabled} onClick={click}>\n    <MicrophoneIcon size=\"10vmin\" />\n  </button>\n));\n","import React from 'react';\n\nimport { connectToWebChat, Components } from 'botframework-webchat';\n\nconst { SpeakActivity } = Components;\n\nexport default connectToWebChat(({ activities }) => ({\n  activity: activities\n    .slice()\n    .reverse()\n    .find(({ from: { role }, type }) => role === 'bot' && type === 'message')\n}))(\n  ({ activity }) =>\n    !!activity && (\n      <React.Fragment>\n        <p>{activity.text}</p>\n        {activity.channelData && activity.channelData.speak && <SpeakActivity activity={activity} />}\n      </React.Fragment>\n    )\n);\n","import './App.css';\nimport {\n  Components,\n  createDirectLine,\n  createCognitiveServicesSpeechServicesPonyfillFactory\n} from 'botframework-webchat';\nimport React, { Component } from 'react';\n\nimport CustomDictationInterims from './CustomDictationInterims';\nimport CustomMicrophoneButton from './CustomMicrophoneButton';\nimport {\n  region as fetchSpeechServicesRegion,\n  token as fetchSpeechServicesToken\n} from './fetchSpeechServicesCredentials';\nimport LastBotActivity from './LastBotActivity';\n\nconst { Composer } = Components;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      directLine: null,\n      webSpeechPonyfillFactory: null\n    };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n    const { token } = await res.json();\n    const webSpeechPonyfillFactory = await createCognitiveServicesSpeechServicesPonyfillFactory({\n      credentials: {\n        authorizationToken: await fetchSpeechServicesToken(),\n        region: await fetchSpeechServicesRegion()\n      }\n    });\n\n    this.setState(() => ({\n      directLine: createDirectLine({\n        token\n      }),\n      webSpeechPonyfillFactory\n    }));\n  }\n\n  render() {\n    const {\n      state: { directLine, webSpeechPonyfillFactory }\n    } = this;\n\n    return (\n      !!directLine &&\n      !!webSpeechPonyfillFactory && (\n        <Composer directLine={directLine} webSpeechPonyfillFactory={webSpeechPonyfillFactory}>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <CustomMicrophoneButton className=\"App-speech-button\" />\n              <CustomDictationInterims className=\"App-speech-interims\" />\n              <LastBotActivity className=\"App-bot-activity\" />\n            </header>\n          </div>\n        </Composer>\n      )\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}